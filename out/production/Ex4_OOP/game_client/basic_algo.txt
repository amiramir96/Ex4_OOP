                          for (Executer ex : executers) {
                            ex.selfUpdateTimeToEndAll(currGD.getAgents().get(ex.getAgent_id()).getSpeed());
                        }
                        tempFreePokemons = currGD.getFreePokemons();
                        speeds = updateSpeeds(currGD.getAgents());
                        for (Pokemon poki : tempFreePokemons) {
                            for (Agent agent : currGD.getAgents()) {
                                if (executers.get(agent.getId()).getNext_stations() == null || executers.get(agent.getId()).getNext_stations().isEmpty()) {
                                    n = currGD.getCurr_graph().getNode(agent.getSrc());
                                } else {
                                    n = currGD.getCurr_graph().getNode(executers.get(agent.getId()).getNext_stations().getLast());
                                }
                                dijkstras[agent.getId()] = new Dijkstra(currGD.getCurr_graph(), n);
                                dijkstras[agent.getId()].mapPathDijkstra(n);
                                times[agent.getId()] = executers.get(agent.getId()).getTimeToEndAll() + dijkstras[agent.getId()].shortestToSpecificNode(poki.getSrc()) / speeds[agent.getId()];
                            }
                            min_time = Double.MAX_VALUE;
                            min_idx = 0;
                            for (int i = 0; i < times.length; i++) {
                                if (min_time > times[i]) {
                                    min_idx = i;
                                    min_time = times[i];
                                }
                            }
                            executers.get(min_idx).addManyStops(dijkstras[min_idx].shortestPathList(poki.getSrc()));
                            executers.get(min_idx).addStop(poki.getDest());
                            times = new double[executers.size()];
                            poki.setEngaged(true);
                        }